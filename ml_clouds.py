# -*- coding: utf-8 -*-
"""ML_Clouds.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LTJfSSWyhr0sJ7Ta16Jwv4pl0W1WOjT8
"""

# Commented out IPython magic to ensure Python compatibility.
try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf
from __future__ import absolute_import, division, print_function, unicode_literals
from tensorflow.python.keras.preprocessing.image import ImageDataGenerator
from tensorflow.python.keras import optimizers
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dropout, Flatten, Dense, Activation
from tensorflow.python.keras.layers import  Conv2D, MaxPooling2D
from tensorflow.python.keras import backend as K
import sys
import os
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

#Folder with the data information, this change depending where you have the information
validation_dir = '/content/drive/My Drive/ML_enfasis_V2/data/entrenamiento'
train_dir = '/content/drive/My Drive/ML_enfasis_V2/data/validacion'


#inside of those packets we have the 2 data sets, cats and dogs, so we need to tag them 
train_fish_dir = os.path.join(train_dir, 'Fish')  # directory with our training fish pictures
train_flower_dir = os.path.join(train_dir, 'Flower')  # directory with our training Flower pictures
train_gravel_dir = os.path.join(train_dir, 'Gravel')  # directory with our training gravel pictures 
train_sugar_dir = os.path.join(train_dir, 'Sugar')  # directory with our training Sugar pictures 

validation_fish_dir = os.path.join(validation_dir, 'Fish')  # directory with our validation fish pictures
validation_flower_dir = os.path.join(validation_dir, 'Flower')  # directory with our validation flower pictures
validation_gravel_dir = os.path.join(validation_dir, 'Gravel')  # directory with our validation gravel pictures
validation_sugar_dir = os.path.join(validation_dir, 'Sugar')  # directory with our validation sugar pictures

num_fish_tr = len(os.listdir(train_fish_dir)) #this is the length of the images of fish to train
num_flower_tr = len(os.listdir(train_flower_dir)) #this is the length of the images of flower to train
num_gravel_tr = len(os.listdir(train_gravel_dir)) #this is the length of the images of gravel to train
num_sugar_tr = len(os.listdir(train_sugar_dir)) #this is the length of the images of sugar to train

num_fish_val = len(os.listdir(validation_fish_dir)) #this is the length of the images of fish for validation
num_flower_val = len(os.listdir(validation_flower_dir)) #this is the length of the images of flower for validation
num_gravel_val = len(os.listdir(validation_gravel_dir)) #this is the length of the images of gravel for validation
num_sugar_val = len(os.listdir(validation_sugar_dir)) #this is the length of the images of sugar for validation

total_train = num_fish_tr + num_flower_tr + validation_gravel_dir + num_sugar_tr #this is the length of the images of cats to train
total_val = num_fish_val + num_flower_val + num_gravel_val + num_sugar_val #this is the length of the images of dogs to train
print("Total training images:", total_train) #print the total numer of cat pictures 
print("Total validation images:", total_val) #print the total numer of dog pictures

"""
Parameters
"""
batch_size = 128 # number of samples that will be propagated through the network
epochs = 15 # numer of forward an backward pass for each batch_size
IMG_HEIGHT = 150 #height of the pictures
IMG_WIDTH = 150 #width of the pictures

##Preparamos nuestras imagenes

image_gen_train = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=45,
                    width_shift_range=.15,
                    height_shift_range=.15,
                    horizontal_flip=True,
                    zoom_range=0.5
                    )

#in validation we don't do nothing because are an example of how real image should be
image_gen_val = ImageDataGenerator(rescale=1./255)

#define what the cnn will use to train 
train_data_gen = image_gen_train.flow_from_directory(batch_size=batch_size,
                                                     directory=train_dir,
                                                     shuffle=True,
                                                     target_size=(IMG_HEIGHT, IMG_WIDTH),
                                                     class_mode='categorical')
def plotImages(images_arr):
    fig, axes = plt.subplots(1, 5, figsize=(20,20))
    axes = axes.flatten()
    for img, ax in zip( images_arr, axes):
        ax.imshow(img)
        ax.axis('off')
    plt.tight_layout()
    plt.show()

val_data_gen = image_gen_val.flow_from_directory(batch_size=batch_size,
                                                 directory=validation_dir,
                                                 target_size=(IMG_HEIGHT, IMG_WIDTH),
                                                 class_mode='categorical')

augmented_images = [train_data_gen[0][0][0] for i in range(5)]
#plotImages(augmented_images)

model_enfa = Sequential([
    Conv2D(16, 3, padding='same', activation='relu', #convolution with 16 filterns of 3 of size
           input_shape=(IMG_HEIGHT, IMG_WIDTH ,3)),
    MaxPooling2D(),
    Dropout(0.2),                                     #drop out of 20% to turn off 20% on neurons
    Conv2D(32, 3, padding='same', activation='relu'),
    MaxPooling2D(),                                   #drop out of 20% to turn off 20% on neurons
    Conv2D(64, 3, padding='same', activation='relu'),
    MaxPooling2D(),
    Dropout(0.2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(256, activation='relu'),
    Dense(3)
])

model_enfa.compile(optimizer='adam',
                  loss=tf.keras.losses.CategoricalCrossentropy(
    name='categorical_crossentropy'),
                  metrics=['accuracy'])
model_enfa.summary()

history = model_enfa.fit_generator(
    train_data_gen,
    steps_per_epoch=total_train // batch_size,
    epochs=epochs,
    validation_data=val_data_gen,
    validation_steps=total_val // batch_size
)

target_dir = './modelo/'
if not os.path.exists(target_dir):
  os.mkdir(target_dir)
model_enfa.save('./modelo/modelo.h5')
model_enfa.save_weights('./modelo/pesos.h5')

"""import numpy as np
from keras.preprocessing.image import load_img, img_to_array
from keras.models import load_model

longitud, altura = 150, 150
modelo = './modelo/modelo.h5'
pesos_modelo = './modelo/pesos.h5'
cnn = load_model(modelo)
cnn.load_weights(pesos_modelo)"""

import numpy as np
from keras.preprocessing.image import load_img, img_to_array
from keras.models import load_model

def predict(file):
  x = load_img(file, target_size=(150, 150))
  x = img_to_array(x)
  x = np.expand_dims(x, axis=0)
  array = model_enfa.predict(x)
  result = array[0]
  answer = np.argmax(result)
  if answer == 0:
    print("pred: Fish")
  elif answer == 1:
    print("pred: Flower")
  elif answer == 2:
    print("pred: Gravel")
  elif answer == 3:
    print("pred: Sugar")
  return answer
predict('cloud.jpg')

